

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

"""**Importing the Dataset**"""

data = pd.read_csv('/content/Churn_Modelling (2).csv')

data.head(4)

data.info()

data.describe()

data.tail()

# Checking if our dataset contains any NULL values

data.isnull().sum()

"""**Data Analysis**"""

data['Gender'].value_counts()

# Plotting the features of the dataset to see the correlation between them

plt.hist(x = data.Gender, bins = 3, color = 'pink')
plt.title('comparison of male and female')
plt.xlabel('Gender')
plt.ylabel('population')
plt.show()

data['Age'].value_counts()

# comparison of age in the dataset

plt.hist(x = data.Age, bins = 10, color = 'yellow')
plt.title('comparison of Age')
plt.xlabel('Age')
plt.ylabel('population')
plt.show()

data['Geography'].value_counts()

# comparison of geography

plt.hist(x = data.Geography, bins = 5, color = 'blue')
plt.title('comparison of Geography')
plt.xlabel('Geography')
plt.ylabel('population')
plt.show()

data['HasCrCard'].value_counts()

# comparision of how many customers hold the credit card

plt.hist(x = data.HasCrCard, bins = 3, color = 'violet')
plt.title('how many people have or not have the credit card')
plt.xlabel('customers holding credit card')
plt.ylabel('population')
plt.show()

data['IsActiveMember'].value_counts()

# How many active member does the bank have ?

plt.hist(x = data.IsActiveMember, bins = 3, color = 'pink')
plt.title('Active Members')
plt.xlabel('Customers')
plt.ylabel('population')
plt.show()

# comparison between Geography and Gender

Gender = pd.crosstab(data['Gender'],data['Geography'])
Gender.div(Gender.sum(1).astype(float), axis=0).plot(kind="bar", stacked=True, figsize=(6, 6))

# comparison between geography and card holders

HasCrCard = pd.crosstab(data['HasCrCard'], data['Geography'])
HasCrCard.div(HasCrCard.sum(1).astype(float), axis = 0).plot(kind = 'bar',
                                            stacked = True,figsize = (6, 6))

# comparison of active member in differnt geographies

IsActiveMember = pd.crosstab(data['IsActiveMember'], data['Geography'])
IsActiveMember.div(IsActiveMember.sum(1).astype(float), axis = 0).plot(kind = 'bar',
                                             stacked = True, figsize= (6, 6))

# comparing ages in different geographies

Age = pd.crosstab(data['Age'], data['Geography'])
Age.div(Age.sum(1).astype(float), axis = 0).plot(kind = 'bar',
                                           stacked = True, figsize = (6,6))

# calculating total balance in france, germany and spain

total_france = data.Balance[data.Geography == 'France'].sum()
total_germany = data.Balance[data.Geography == 'Germany'].sum()
total_spain = data.Balance[data.Geography == 'Spain'].sum()

print("Total Balance in France :",total_france)
print("Total Balance in Germany :",total_germany)
print("Total Balance in Spain :",total_spain)

# plotting a pie chart

labels = 'France', 'Germany', 'Spain'
colors = ['cyan', 'magenta', 'orange']
sizes =  [311, 300, 153]
explode = [ 0.01, 0.01, 0.01]

plt.pie(sizes, colors = colors, labels = labels, explode = explode, shadow = True)

plt.axis('equal')
plt.show()

"""**Data Preprocessing**"""

# Removing the unnecassary features from the dataset

data = data.drop(['CustomerId', 'Surname', 'RowNumber'], axis = 1)



print(data.columns)

data.shape

# splitting the dataset into x(independent variables) and y(dependent variables)

x = data.iloc[:,0:10]
y = data.iloc[:,10]

print(x.shape)
print(y.shape)

print(x.columns)
#print(y)

# Encoding Categorical variables into numerical variables
# One Hot Encoding

x = pd.get_dummies(x)

x.head()

x.shape

# splitting the data into training and testing set

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

# Feature Scaling
# Only on Independent Variable to convert them into values ranging from -1 to +1

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

x_train = pd.DataFrame(x_train)
x_train.head()

"""**Modelling**

**Decision Tree**
"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix

model = DecisionTreeClassifier()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Training Accuracy :", model.score(x_train, y_train))
print("Testing Accuaracy :", model.score(x_test, y_test))

cm = confusion_matrix(y_test, y_pred)
print(cm)

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Training Accuracy :", model.score(x_train, y_train))
print("Testing Accuracy :", model.score(x_test, y_test))

cm = confusion_matrix(y_test, y_pred)
print(cm)

# k fold cross validatio

from sklearn.model_selection import cross_val_score

cvs = cross_val_score(estimator = model, X = x_train, y = y_train, cv = 10)
print(cvs)

print("Mean Accuracy :", cvs.mean())
print("Variance :", cvs.std())

"""**Logistic Regression**"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Training Accuracy :", model.score(x_train, y_train))
print("Testing Accuracy :", model.score(x_test, y_test))

cm = confusion_matrix(y_test, y_pred)
print(cm)

"""**Support Vector Machine**"""

from sklearn.svm import SVC

model = SVC()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Training Accuracy :", model.score(x_train, y_train))
print("Testing Accuracy :", model.score(x_test, y_test))

cm = confusion_matrix(y_test, y_pred)
print(cm)

# k fold cross validatio

from sklearn.model_selection import cross_val_score

cvs = cross_val_score(estimator = model, X = x_train, y = y_train, cv = 10)
print(cvs)

print("Mean Accuracy :", cvs.mean())
print("Variance :", cvs.std())

from sklearn.neural_network import MLPClassifier

model = MLPClassifier(hidden_layer_sizes = (10, 10), activation ='relu',
                      solver = 'adam', max_iter = 50)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Training Accuracy :", model.score(x_train, y_train))
print("Testing Accuracy :", model.score(x_test, y_test))

cm = confusion_matrix(y_test, y_pred)
print(cm)

"""**Multi Layer Perceptron**"""

from sklearn.neural_network import MLPClassifier

model = MLPClassifier(hidden_layer_sizes = (100, 100), activation ='relu',
                      solver = 'adam', max_iter = 50)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Training Accuracy :", model.score(x_train, y_train))
print("Testing Accuracy :", model.score(x_test, y_test))

cm = confusion_matrix(y_test, y_pred)
print(cm)

"""**Aritificial Neural Networks**"""

import keras
from keras.models import Sequential
from keras.layers import Dense

# creating the model
model = Sequential()

# first hidden layer
model.add(Dense(units = 8, kernel_initializer= 'uniform', activation = 'relu', input_dim = 13))

# second hidden layer
model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))

# third hidden layer
model.add(Dense(units = 8,kernel_initializer = 'uniform', activation = 'relu'))

# fourth hidden layer
model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))

# fifth hidden layer
model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))

# output layer
model.add(Dense(units = 1, kernel_initializer= 'uniform', activation = 'sigmoid'))

# Compiling the NN
# binary_crossentropy loss function used when a binary output is expected
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

model.fit(x_train, y_train, batch_size = 10,epochs = 50)

model.summary()

model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))

 fifth hidden layer
model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))
model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))

 fifth hidden layer
model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))





"""**Aritificial Neural Networks**"""

